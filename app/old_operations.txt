def satisfaction(message, question):
    try:
        if_admin = bd.if_admin(user_id, cursor)
        conn.commit()

    except OperationalError as e:
        print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        conn.rollback()
    
    if message.text == "–¥–∞":
        bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∫–ª–∏–∫!", reply_markup=kb.main_keyboard_user)
    elif message.text == "–Ω–µ—Ç":
        bot.send_message(message.chat.id, "–ñ–∞–ª—å, —è —É–∑–Ω–∞—é –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ —Ç–µ–±–µ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!", reply_markup=kb.main_keyboard_user)
        bd.db_table_val_app(user_id=message.from_user.id,
                    username = message.from_user.username,
                    question=question,
                    answer="–ü–æ–∫–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏",
                    status = False, cursor=cursor, conn=conn)
        notify_admins(question, message.from_user.username)
    else:
        if if_admin: bot.send_message(message.chat.id, texts.home, reply_markup=kb.main_keyboard_admin)
        else: bot.send_message(message.chat.id, texts.home, reply_markup=kb.main_keyboard_user)


def question_send(message):
    global user_id
    try:
        if_admin = bd.if_admin(user_id, cursor)
        conn.commit()

    except OperationalError as e:
        print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        conn.rollback()
    user_id = message.from_user.id
    question = message.text
    if question!='üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é':
        bd.db_table_val_app(user_id=message.from_user.id,
                    username = message.from_user.username,
                    question=question,
                    answer="–ü–æ–∫–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏",
                    status = False, cursor=cursor, conn=conn)
        notify_admins(question, message.from_user.username)
        if if_admin: bot.send_message(message.chat.id, "–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!", reply_markup=kb.main_keyboard_admin)
        else: bot.send_message(message.chat.id, "–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!", reply_markup=kb.main_keyboard_user)
    else: 
        if if_admin: bot.send_message(message.chat.id, texts.home, reply_markup=kb.main_keyboard_admin)
        else: bot.send_message(message.chat.id, texts.home, reply_markup=kb.main_keyboard_user)

elif message.text == "‚ùìÔ∏è–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        key_1 = types.KeyboardButton(text='üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é')
        keyboard.add(key_1)
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É",reply_markup=keyboard)
        bot.register_next_step_handler(message, question_send)

    elif message.text == "üì¨–ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã":
        keyboard = types.InlineKeyboardMarkup()
        key_1 = types.InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data='previousmyq')
        key_3 = types.InlineKeyboardButton(text='‚û°Ô∏è', callback_data='nextmyq')
        keyboard.add(key_1, key_3) 
        
        try:
            cursor.execute('SELECT question FROM applications where telegram_id=%s', (user_id,))
            myqtext = cursor.fetchone()[0]
            cursor.execute('SELECT id FROM applications where telegram_id=%s', (user_id,))
            myquestionnum = cursor.fetchone()[0]
            cursor.execute('SELECT answer FROM applications where telegram_id=%s', (user_id,))
            myquestionans = cursor.fetchone()[0]
            bot.send_message(message.from_user.id, text=F"–í–æ–ø—Ä–æ—Å #{myquestionnum}\n\n{myqtext}\n\n–û—Ç–≤–µ—Ç: {myquestionans}", reply_markup=keyboard)
        except:
            bot.send_message(message.from_user.id, text="–í—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")